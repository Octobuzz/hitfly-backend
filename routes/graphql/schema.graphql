scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")



type Query {

    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")

    genres: [Genre!]!  @paginate(type: "paginator" model: "App\\Models\\Genre")
    genre(id: ID @eq): Genre @find(model: "App\\Models\\Genre")

    musicGroups: [MusicGroup!]! @paginate(type: "paginator" model: "App\\Models\\MusicGroup")
    musicGroup(id: ID @eq): Genre @find(model: "App\\Models\\MusicGroup")

    albums: [Album!]! @paginate(type: "paginator" model: "App\\Models\\Album")
    album(id: ID @eq): Album @find(model: "App\\Models\\Album")

    tracks: [Track!]! @paginate(type: "paginator" model: "App\\Models\\Track")
    track(id: ID @eq): Track @find(model: "App\\Models\\Track")

}

type Mutation @group(namespace: "App\\Http\\GraphQL\\Mutations"  middleware: []) {
    createUser(
        name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
    ): User @create(model: "App\\User")
    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "App\\User")
    deleteUser(
        id: ID @rules(apply: ["required"])
    ): User @delete(model: "App\\User")


    # Музыкальные группы
    createMusicGroup(
        name: String @rules(apply: ["required"])
        avatarGroup: String
        career_start_year: DateTime! @rules(apply: ["required"])
        description: String
    ): MusicGroup
        @create(model: "App\\Models\\MusicGroup")
        @inject(context: "user.id", name: "creator_group_id")

    deleteMusicGroup(id: ID!): MusicGroup @delete(globalId: true )


}

type User {
    id: ID!
    username: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Genre @model(class: "App\\Models\\Genre") {
    id: ID!
    name: String!
    image: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Track @model(class: "App\\Models\\Track"){
    id: ID!
    track_name: String!
    album: Album @belongsTo(attribute: "album")
    genre: Genre @belongsTo(attribute: "genre")
    user: User @belongsTo(attribute: "user")
    singer: String
    track_date: String
    song_text: String
    filename: String
}

type MusicGroup @model(class: "App\\Models\\MusicGroup") {
    id: ID!
    name: String!
    avatar_group: String
    career_start_year: DateTime!
    genre: Genre @belongsTo
    creator_group: User! @belongsTo(relation: "user")
    description: String
    albums: [Album!]!  @hasMany(type: "connection")

}

type Album  @model(class: "App\\Models\\Album") {
    id: ID!
    title: String
    author: String!
    year: DateTime!
    cover: String!
    music_group: MusicGroup @belongsTo
}
